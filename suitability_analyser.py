# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SuitabilityAnalyser
                                 A QGIS plugin
 Identify optimal locations for development projects using population density, proximity to roads and water bodies, and district boundaries. Visualise and export results directly on the map
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-30
        git sha              : $Format:%H$
        copyright            : (C) 2024 by plugin hacker
        email                : tonykanyamuka@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QTableWidgetItem
from qgis.core  import (
    QgsProject,
    QgsVectorLayer,
    QgsField,
    QgsFeature,
    QgsGeometry
)

import psycopg2

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .suitability_analyser_dialog import SuitabilityAnalyserDialog
import os.path


class SuitabilityAnalyser:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SuitabilityAnalyser_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Suitability Analyser')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SuitabilityAnalyser', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/suitability_analyser/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Run Suitability Analysis'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Suitability Analyser'),
                action)
            self.iface.removeToolBarIcon(action)

    
    def db_connection(self):

    # """Establish a connection to the database."""

        try:
            conn = psycopg2.connect(
                dbname="analysis",
                user="postgres",
                password="adminpassword",
                host="localhost",
                port="5432"
            )
            return conn
        except Exception as e:
            print(f"Error connecting to the database: {e}")
            return None
    

    def fetch_boundaries(self):
    # """Fetch district or administrative boundaries from the database."""
        conn = self.db_connection()
        if conn:
            try:
                cursor = conn.cursor()
                query = "SELECT district FROM mw_districts;"
                cursor.execute(query)
                boundaries = cursor.fetchall()
                conn.close()
                return [b[0] for b in boundaries]  # Extract names from tuples
            except Exception as e:
                print(f"Error fetching boundaries: {e}")
                return []
        return []
    

    def fetch_analysis_data(self, boundary, distance_from_roads, distance_from_water, pop_density, pop_density_operator):
        """
        Fetch suitability analysis data with spatial buffering.
        """
        conn = self.db_connection()
        if conn:
            try:
                cursor = conn.cursor()
                query = f"""
                    SELECT
                        d.id AS district_id,
                        d.district AS district_name,
                        ST_Buffer(r.geom, %s) AS road_buffer,
                        ST_Buffer(w.geom, %s) AS water_buffer,
                        d.geom AS district_geom,
                        d.population_density
                    FROM
                        mw_districts d
                    LEFT JOIN
                        roadway_block r ON ST_DWithin(r.geom, d.geom, %s)
                    LEFT JOIN
                        water_bodies w ON ST_DWithin(w.geom, d.geom, %s)
                    WHERE
                        d.district = %s
                        AND d.population_density {pop_density_operator} %s;
                """
                cursor.execute(query, (distance_from_roads, distance_from_water, boundary, pop_density))
                results = cursor.fetchall()
                conn.close()
                return results
            except Exception as e:
                print(f"Error fetching analysis data: {e}")
                return []
        return []

    

    def perform_analysis(self):
        """Perform analysis based on user inputs."""
        # Get user inputs
        boundary = self.dlg.comboBoxBoundary.currentText()
        distance_from_roads = self.dlg.doubleSpinBox_2.value()
        distance_from_water = self.dlg.doubleSpinBox.value()
        pop_density = self.dlg.sliderDensity_3.value()
        pop_density_operator = (
            ">=" if self.dlg.radioButtonGreater_2.isChecked() else
            "<=" if self.dlg.radioButtonLess_2.isChecked() else "="
        )

        # buffer_distance = self.dlg.doubleSpinBoxBufferDistance.value()
        
        # Fetch analysis data
        results = self.fetch_analysis_data(
            boundary,
            distance_from_roads,
            distance_from_water,
            pop_density,
            pop_density_operator
        )

        # Check if no results were found
        if not results:
            self.iface.messageBar().pushMessage("No results found", level=2)  # Level 2 is a warning
            return

        # Create a new memory layer
        layer = QgsVectorLayer("Point?crs=EPSG:4326", f"Suitability Analysis - {boundary}", "memory")  # Set layer title to the boundary
        pr = layer.dataProvider()

        # Add fields
        pr.addAttributes([
            QgsField("District", QVariant.String),
            QgsField("RoadType", QVariant.String),
            QgsField("PopDensity", QVariant.Double),
            QgsField("DistanceRoad", QVariant.Double)
        ])
        layer.updateFields()

        # Add features
        features = []
        for result in results:
            # Extract geometry and attributes
            district_name = result[1]
            road_type = result[6]
            pop_density = result[9]
            distance_to_road = result[7]
            geom = QgsGeometry.fromWkt(result[2])  # Ensure your data contains WKT geometries

            # Create feature
            feature = QgsFeature()
            feature.setGeometry(geom)
            feature.setAttributes([district_name, road_type, pop_density, distance_to_road])
            features.append(feature)

        # Add features to the layer
        pr.addFeatures(features)
        layer.updateExtents()

        # Add the layer to QGIS
        QgsProject.instance().addMapLayer(layer)
        self.iface.messageBar().pushMessage(f"Analysis complete: Layer '{layer.name()}' added", level=1)  # Level 1 is info

    def display_results_in_table(self, results):
        """Display results in a QTableWidget."""
        self.dlg.tableWidgetResults.setRowCount(len(results))
        for row_idx, row_data in enumerate(results):
            for col_idx, col_data in enumerate(row_data):
                self.dlg.tableWidgetResults.setItem(
                    row_idx, col_idx, QTableWidgetItem(str(col_data))
                )


    def run(self):
        """Run method that performs all the real work"""\
        

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SuitabilityAnalyserDialog()


            # Connect the analysis button to the function
            self.dlg.buttonRunAnalysis.clicked.connect(self.perform_analysis)

    

        boundaries = self.fetch_boundaries()

        self.dlg.comboBoxBoundary.clear()
        self.dlg.comboBoxBoundary.addItems(boundaries)


        # show the dialog
        self.dlg.show()


        boundary = self.dlg.comboBoxBoundary.currentText()
        distance_from_roads = self.dlg.doubleSpinBox_2.value()
        distance_from_water = self.dlg.doubleSpinBox.value()
        pop_density = self.dlg.sliderDensity_3.value()
        pop_density_operator = (
            ">=" if self.dlg.radioButtonGreater_2.isChecked() else
            "<=" if self.dlg.radioButtonLess_2.isChecked() else "="
)

        # Run the dialog event loop
        result = self.dlg.exec_()
        results = self.fetch_analysis_data(boundary, distance_from_roads, distance_from_water, pop_density, pop_density_operator)
        # See if OK was pressed
        # if result:
        #     # Do something useful here - delete the line containing pass and
        #     # substitute with your code.
        #     pass
        if result:
    # Display results in your GUI or export them
            print("Results fetched:", results)
        else:
            print("No results found.")
